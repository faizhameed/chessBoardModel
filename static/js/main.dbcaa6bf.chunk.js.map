{"version":3,"sources":["components/Square.js","Chess.js","components/Bordertext.js","App.js","serviceWorker.js","index.js"],"names":["Square","_ref","squareColor","sqname","react_default","a","createElement","className","chessRow","chessColumn","Chess","squareClass","i","j","console","log","concat","_this2","this","map","r","key","c","id","components_Square","Component","Bordertext","App","state","components_Bordertext","src_Chess","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAUeA,SAPD,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,YAAYC,EAAWF,EAAXE,OAEpB,OAASC,EAAAC,EAAAC,cAAA,OAAKC,UAAYL,GAClBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUJ,MCF/BK,EAAS,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAC1CC,EAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KA0BhCC,6MAtBXC,YAAc,SAACC,EAAEC,GAEb,OADAC,QAAQC,IAAR,QAAAC,OAAoBJ,EAApB,YAAAI,OAAgCH,KACvBD,EAAEC,GAAG,IAAI,EAAG,qBAAqB,8FAGlC,IAAAI,EAAAC,KAGR,OAAQd,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SAAUC,EAASW,IAAI,SAACC,EAAER,GAEnD,OAAMR,EAAAC,EAAAC,cAAA,OAAKC,UAAW,MAAMc,IAAKD,GAA3B,IAAgCX,EAAYU,IAAI,SAACG,EAAET,GACtD,IAAMX,EAAce,EAAKN,YAAYC,EAAEC,GAC1C,OAAOT,EAAAC,EAAAC,cAAA,OAAKe,IAAOD,EAAEE,EAAGC,GAAIH,EAAEE,GAE1BlB,EAAAC,EAAAC,cAACkB,EAAD,CAAQtB,YAAcA,EAAaC,OAAQiB,EAAEE,kBAhBrCG,aCLdjB,EAAS,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KACtCC,EAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAkBhCiB,mLAdP,OACAtB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,cACZC,EAASW,IAAI,SAAAC,GAAC,OAAGhB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WAAWa,MAEhDhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXE,EAAYU,IAAI,SAAAG,GAAC,OAAGlB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,cAAce,cAVrCG,aCyBVE,6MArBbC,MAAQ,2EAIN,OACAxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,+EACAF,EAAAC,EAAAC,cAAA,uDAIFF,EAAAC,EAAAC,cAACuB,EAAD,MACCzB,EAAAC,EAAAC,cAACwB,EAAD,cAhBaL,aCKEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dbcaa6bf.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Square =({squareColor,sqname})=> {\n\n        return ( <div className ={squareColor}>\n                <div className=\"sqname\">{sqname}</div></div> );\n    \n}\n \nexport default Square;","import React, { Component } from 'react';\nimport Square from './components/Square';\n\n\nconst     chessRow=['a','b','c','d','e','f','g','h'];\nconst chessColumn=['8','7','6','5','4','3','2','1'];\n\nclass Chess extends Component {\n\n    squareClass = (i,j)=>{\n        console.log(`row: ${i} column ${j}`);\n        return ((i+j)%2===0)?'row chessw chessSq':'row chessb chessSq' \n       } \n    \n       render() {\n      \n        \n        return (<div className = \"board\">{ chessRow.map((r,i)=>{\n        \n        return<div className= \"row\" key={r}> {chessColumn.map((c,j)=>{\n           const squareColor = this.squareClass(i,j);                         //pass a function to determine the class\n        return <div key = {r+c} id={r+c}>\n           \n            <Square squareColor= {squareColor} sqname={r+c}/>\n        </div>})}</div> \n        })\n      }</div>\n        );\n    }\n}\n \nexport default Chess;","import React, { Component } from 'react';\n\nconst chessRow=['a','b','c','d','e','f','g','h'];\nconst chessColumn=['8','7','6','5','4','3','2','1'];\nclass Bordertext extends Component {\n    render() { \n\n        return (\n        <div>\n        \n        <div className= \"rowtextall\">{\n            chessRow.map(r =><div className ='rowtext'>{r}</div>)\n        }</div> \n        <div className=\"columntextall\">{\n            chessColumn.map(c =><div className= 'columntext'>{c}</div>)\n        }\n        </div> \n        </div>);\n    }\n}\n \nexport default Bordertext;","\nimport './App.css';\nimport React, { Component } from 'react';\n\nimport Chess from './Chess';\nimport Bordertext from './components/Bordertext';\n\nclass App extends Component {\n  state = {  }\n\n  render() { \n\n    return (\n    <div className=\"App\">\n    <header className=\"App-header\">\n      <div className=\"container\">\n      <h1>Chess Board</h1>\n      <p>Each chess square has unique key given to it by using map function</p>\n      <h3>Hover over square to see the uniquie id</h3>\n\n      </div>\n    </header>\n    <Bordertext/>\n     <Chess/>\n  </div>  );\n  }\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}